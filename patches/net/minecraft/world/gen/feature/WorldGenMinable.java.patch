--- ../src-base/minecraft/net/minecraft/world/gen/feature/WorldGenMinable.java
+++ ../src-work/minecraft/net/minecraft/world/gen/feature/WorldGenMinable.java
@@ -27,55 +27,55 @@
         this.field_175919_c = p_i45631_3_;
     }
 
-    public boolean func_180709_b(World p_180709_1_, Random p_180709_2_, BlockPos p_180709_3_)
+    public boolean generate_vanilla(World worldIn, Random rand, BlockPos position)
     {
-        float f = p_180709_2_.nextFloat() * (float)Math.PI;
-        double d0 = (double)((float)(p_180709_3_.func_177958_n() + 8) + MathHelper.func_76126_a(f) * (float)this.field_76541_b / 8.0F);
-        double d1 = (double)((float)(p_180709_3_.func_177958_n() + 8) - MathHelper.func_76126_a(f) * (float)this.field_76541_b / 8.0F);
-        double d2 = (double)((float)(p_180709_3_.func_177952_p() + 8) + MathHelper.func_76134_b(f) * (float)this.field_76541_b / 8.0F);
-        double d3 = (double)((float)(p_180709_3_.func_177952_p() + 8) - MathHelper.func_76134_b(f) * (float)this.field_76541_b / 8.0F);
-        double d4 = (double)(p_180709_3_.func_177956_o() + p_180709_2_.nextInt(3) - 2);
-        double d5 = (double)(p_180709_3_.func_177956_o() + p_180709_2_.nextInt(3) - 2);
+        float angle = rand.nextFloat() * (float)Math.PI;
+        double x1 = (double)((float)(position.func_177958_n() + 8) + MathHelper.func_76126_a(angle) * (float)this.field_76541_b / 8.0F);
+        double x2 = (double)((float)(position.func_177958_n() + 8) - MathHelper.func_76126_a(angle) * (float)this.field_76541_b / 8.0F);
+        double z1 = (double)((float)(position.func_177952_p() + 8) + MathHelper.func_76134_b(angle) * (float)this.field_76541_b / 8.0F);
+        double z2 = (double)((float)(position.func_177952_p() + 8) - MathHelper.func_76134_b(angle) * (float)this.field_76541_b / 8.0F);
+        double y1 = (double)(position.func_177956_o() + rand.nextInt(3) - 2);
+        double y2 = (double)(position.func_177956_o() + rand.nextInt(3) - 2);
 
-        for (int i = 0; i < this.field_76541_b; ++i)
+        for (int step = 0; step < this.field_76541_b; ++step)
         {
-            float f1 = (float)i / (float)this.field_76541_b;
-            double d6 = d0 + (d1 - d0) * (double)f1;
-            double d7 = d4 + (d5 - d4) * (double)f1;
-            double d8 = d2 + (d3 - d2) * (double)f1;
-            double d9 = p_180709_2_.nextDouble() * (double)this.field_76541_b / 16.0D;
-            double d10 = (double)(MathHelper.func_76126_a((float)Math.PI * f1) + 1.0F) * d9 + 1.0D;
-            double d11 = (double)(MathHelper.func_76126_a((float)Math.PI * f1) + 1.0F) * d9 + 1.0D;
-            int j = MathHelper.func_76128_c(d6 - d10 / 2.0D);
-            int k = MathHelper.func_76128_c(d7 - d11 / 2.0D);
-            int l = MathHelper.func_76128_c(d8 - d10 / 2.0D);
-            int i1 = MathHelper.func_76128_c(d6 + d10 / 2.0D);
-            int j1 = MathHelper.func_76128_c(d7 + d11 / 2.0D);
-            int k1 = MathHelper.func_76128_c(d8 + d10 / 2.0D);
+            float progress = (float)step / (float)this.field_76541_b;
+            double x = x1 + (x2 - x1) * (double)progress;
+            double y = y1 + (y2 - y1) * (double)progress;
+            double z = z1 + (z2 - z1) * (double)progress;
+            double scale = rand.nextDouble() * (double)this.field_76541_b / 16.0D;
+            double horizontalOff = (double)(MathHelper.func_76126_a((float)Math.PI * progress) + 1.0F) * scale + 1.0D;
+            double verticalOff = (double)(MathHelper.func_76126_a((float)Math.PI * progress) + 1.0F) * scale + 1.0D;
+            int xMin = MathHelper.func_76128_c(x - horizontalOff / 2.0D);
+            int yMin = MathHelper.func_76128_c(y - verticalOff / 2.0D);
+            int zMin = MathHelper.func_76128_c(z - horizontalOff / 2.0D);
+            int xMax = MathHelper.func_76128_c(x + horizontalOff / 2.0D);
+            int yMax = MathHelper.func_76128_c(y + verticalOff / 2.0D);
+            int zMax = MathHelper.func_76128_c(z + horizontalOff / 2.0D);
 
-            for (int l1 = j; l1 <= i1; ++l1)
+            for (int curX = xMin; curX <= xMax; ++curX)
             {
-                double d12 = ((double)l1 + 0.5D - d6) / (d10 / 2.0D);
+                double xRatio = ((double)curX + 0.5D - x) / (horizontalOff / 2.0D);
 
-                if (d12 * d12 < 1.0D)
+                if (xRatio * xRatio < 1.0D)
                 {
-                    for (int i2 = k; i2 <= j1; ++i2)
+                    for (int curY = yMin; curY <= yMax; ++curY)
                     {
-                        double d13 = ((double)i2 + 0.5D - d7) / (d11 / 2.0D);
+                        double yRatio = ((double)curY + 0.5D - y) / (verticalOff / 2.0D);
 
-                        if (d12 * d12 + d13 * d13 < 1.0D)
+                        if (xRatio * xRatio + yRatio * yRatio < 1.0D)
                         {
-                            for (int j2 = l; j2 <= k1; ++j2)
+                            for (int curZ = zMin; curZ <= zMax; ++curZ)
                             {
-                                double d14 = ((double)j2 + 0.5D - d8) / (d10 / 2.0D);
+                                double zRatio = ((double)curZ + 0.5D - z) / (horizontalOff / 2.0D);
 
-                                if (d12 * d12 + d13 * d13 + d14 * d14 < 1.0D)
+                                if (xRatio * xRatio + yRatio * yRatio + zRatio * zRatio < 1.0D)
                                 {
-                                    BlockPos blockpos = new BlockPos(l1, i2, j2);
+                                    BlockPos blockpos = new BlockPos(curX, curY, curZ);
 
-                                    if (this.field_175919_c.apply(p_180709_1_.func_180495_p(blockpos)))
+                                    if (this.field_175919_c.apply(worldIn.func_180495_p(blockpos)))
                                     {
-                                        p_180709_1_.func_180501_a(blockpos, this.field_175920_a, 2);
+                                        worldIn.func_180501_a(blockpos, this.field_175920_a, 2);
                                     }
                                 }
                             }
